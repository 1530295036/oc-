从变量的存储机制看，c语言的变量可分为动态储存变量和静态存储变量
动态存储：程序在运行期间根据在运行期间根据需要动态分配内存的存储方式

静态存储：程序在运行开始就分配固定内存的存储方式
就c程序运行的内存来说，大致可分为3部分：程序区、静态存储区和动态存储区。c程序中的变量要么在静态存储区，要么在动态存储区。
静态存储区的变量会在程序运行开始时分配内存，直到程序运行结束才会释放内存，在程序运行过程中，静态存储区的变量总是占据固定的内存
静态存储区会存放全局变量（无论是外部全局变量还是内部全局变量）和static修饰的局部变量

动态存储区的变量所在的存储空间是动态分配的，当程序调用同一个函数时，该函数内的局部变量（非static修饰的变量）每次都会动态分配内存空间，每次函数结束就会自动释放内存，这种分配和释放都是动态的。
如果一个程序多次调用同一个函数，程序每次分配给函数的局部变量的存储空间可能时变化的。

动态存储区主要存放如下3类数据
函数的形参变量
非static的局部变量
函数执行的现场数据以及返回地址等

为了指定变量的存储类别，可以在定义变量时知道存住类别，C语言支持如下几种存储类别

auto：指定该变量采用自动存储机制，局部变量默认采用这种存储机制。
用于声明一个自动局部变量，它是函数或方法内部变量的一种默认声明方式。
auto int index；
该语句为index声明一个自动局部变量，也就是说，在方法调用时自动为其分配存储空间，并在方法退出时自动释放这个变量。因为auto在方法中的是默认添加的，因此方法int index和语句auto int index是等效的
自动变量没有默认的初始值，除非现实地为其赋值，否则它的值将是不确定的，静态变量初始值为0

static：指定将局部变量存放到静态存储区。这样该变量所占的空间将会一直保存，直到程序退出。
register：指定将该变量存放到寄存器。
extern：用于声明外部变量。

const
oc中允许使用const讲这些变量的值设定为常数值，这样这些变量的值从头到尾都不会被改变了，假如试图将数据存储到const变量中，或者让const变量自加、自减，编译器都会报错
在程序中为值不变的变量设置const，不可更改其值，必须将其初始化
const double pi = 3.14；

volatile
将变量指定为volatile类型，变量的值会改变（于const相反）可防止编译器优化看似多余的变量赋值，同时避免重复地检查值没有变化的变量，如：
volatile char*outPort；
*outPort = ‘0’；
*outPort = ‘N'；
防止第一个赋值语句从程序中删除。
