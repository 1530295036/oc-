iOS通过 委托 通告 目标-动作 绑定 来实现 对象间的通信机制。

面向对象程序中的通信
为程序加入具体行为的一种方式时继承。
可以为现有的类创建一个子类，然后为该类的实例增加属性火行为，或者以某种方式对其进行修改。
在一个程序中，对象之间的关系不止存在于一个纬度中，处理继承层次结构关系，程序中的对象还动态地存在于一个网络中。
在运行时，网络中的对象必须进行通信，以完成程序的工作。
IBoutlet变量
对象的合成的是一种动态的模式，要求对象设法得到其委托着的引用，以便向其发送消息。包含对象通常以实例变量的方式保有其他对象。
插座变量是一个实例变量，因此也会成为对象封装的一部分。
对象与其插座变量之间的连接会被归档到nib文件中，nib文件被装载时，每个链接都会被解档和保持，因此在需要向其他对象发送消息时，插座对象总是可用的。
类型限定符IBoutlet时一个标签，用于实例变量的声明，通过这个限定符号，Interface Builder程序在开发过程中可以和Xcode同步插座变量的显示和连接
可以为某个定制对象添加插座变量并建立连接，然后生成带有这个插座变量的头文件。

委托和数据源
委托是一种对象，当向外委托任务的对象遇到程序中的事件时，委托可以代表对事件进行处理，或者与事务进行协调。
向外委托任务的对象通常是一个响应者对象，即继承自NSResponder的对象，负责响应用户事件。
委托则是受托事件的用户界面控制，或者至少根据应用程序的具体需要对事件进行解释的对象。
委托的工作机制707页
委托方法：以 进行委托的Application Kit对象的名字作为开头，如应用程序、窗口、控件等，名字是小写，且没有NS前缀。
这个对象名后面通常紧接着一个辅助的动词，只是被报告的事件在时间上的状态，这个动词指示事件时即将发生的（Should或Will），还是刚刚发生的（did或has）。

数据源很像委托，区别在于委托处理的事用户界面控制，而数据源处理的是数据的控制。
数据源负责保障分发给用户界面对象的数据对象的持久性。（内存管理）

实现定制类的委托
可以通过下面的步骤来为定制类实现一个委托
在类头文件声明一个委托存取的方法
-(id)delegate;
-(void)setDelegate:(id)newDelegate;
实现该存取方法。在setter方法中，一个仅拥有委托的弱引用，避免循环保持：
-(id)delegate{
  return delegate;
}
-(void)setDelegate:(id)newDelegate{
  delegate = newDelegate;
}
声明一个包含委托编程接口的非正式协议。非正式协议属于NSObject类的范畴
@interface NSObject(MyobjectDelegateMethod)
-(BOOL)operationShouldProced;
@end
在调用一个委托方法时，向委托发送respondsToSelector：消息，确认其是否实现该方法。
-(void)someMethod{
  if([delegate respondsToSelector:@selector(operationShouldProceed)])
  {
    if([delegate operationShouldProceed])
    {
      //作一些适当的事情
    }
  }
}
