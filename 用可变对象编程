在遇到对象可变性的问题时，下面是几个一般性的原则：
当对象创建之后需要频繁或不断地对其内容进行修改时，使用可变变体；
用一个不可变对象取代另一个可能会更好。
依靠返回类型来进行可变形提示。
如果不确定是不是可变的，就当成不可变的。

创建和转换可变对象
通过一般类型对象可变复制的方式，调用Foundation框架中可变类的不可变超类
NSMutableSet *mutSet = [aSet mutableCopy];
也可以通过向可变对象发送copy消息来得到对象的一个不可变复制。

存储和返回可变实例变量
当一个对象的内容需要发生彻底变化时，使用不可变对象更好一些。
字符串（NSString）和数据对象（NSDate）通常属于这个范畴。
如果逐步发生变化，采用可变变体。例如数组和字典。

处理返回给客户的可变集合的一个复杂方法时维护一个标志，以记录对象当前可变还是不可变的。
将集合提供给其他代码时，返回对象之前将其转换为不可变。

接受可变对象
方法的调用者对返回对象的可变形感兴趣：
希望指定是否可以改变对象的值
希望指定它所引用的对象是否会意外的发生变化。
不应该根据所属的类来判定对象是否可以改变，而是应该将生产对象的方法签名上的可变性声明作为唯一的依据。
