oc面向对象最大的特色就是消息传递（message passing）模型。
在oc中，对象不是简单的调用方法，而是互相传递消息，这与如今流行的C++面向对象风格差异极大。
二者差异主要体现在调用方法和传递消息上。
C++中，类与方法的关系非常紧密，一个方法必定属于一个类，而且在编译期（compile time）方法就已经与类紧密结合在一起，另外，不可能调用一个类中不存在的方法。
在oc中，类与消息的关系较为松散，所有方法都被视为对消息的回应，而调用方法则被视为向类发送消息。所哦咦消息处理直到执行期才会动态决定，并交由类自行决定如何处理收到的消息。
也就是说，一个类不保证一定会回应收到的消息，如果类收到了一个无法处理的消息，程序并不会出错或立即关掉，只会抛出一个异常。

定义消息
要想让一个对象做些什么，只需要向他发送一个消息，告诉他去执行一个方法。在oc中消息表达式要写在括号中。
[receiver message]
接收者是一个对象，消息会告诉它要去做什么。在源码中消息只不过是发给接受者的一个方法名和一些变量。当发送消息时，运行时系统从接收者的方法列表中选择合适的方法并调用。
下面这个消息告诉myRectangle对象执行它的display方法显示矩形区域：
[myRectangle display];
消息以“；”结尾，者和c语言的表达一样。因为方法名在消息中负责选择一个方法执行，所以方法名在消息中通常被称为选择器。
方法可以传递参数，有一个参数的消息通常在方法名后面接一个“：”之后再接一个参数
[myRectangle setWidth: 20.0];
对于有多个参数的方法，通过方法名和参数交替出来表达所需的参数。

下面代码中的消息告诉myRectangle对象设置起始坐标为（30.0，50.0）：
[myRectangle setOriginX: 30.0 y: 50.0];
选择器名包含方法名的所有部分，包括分号，所以上面的例子中选择器名为setOrigin x：y：。
因为此时的方法有两个参数，所以选择器名有两个冒号。选择器不包含其他内容，例如，返回值类型或参数类型。
注意：
选择器名所包含的各部分不是可选的，它们的顺序也不能变化。在一些语言中，named parameters和keyword parameters暗示着参数在运行时可变，可以有默认值，可以有不同的调用顺序，同时可以命名附加的参数。
所有这些参数的特性在oc中都不可用。其实一个oc方法声明加两个额外的参数就是一个c语言函数声明（在c语言中需要声明函数返回值类型和参数类型）。
因此oc的方法声明结构和python中使用名字或关键词的声明结构是不同的。
方法的参数个数是可以变化的，尽管它们非常少见。附加的参数由逗号分隔，接在方法方法名的后面（和分号不同，逗号不是选择器名的一部分）。
在下面的代码中，方法makeGroup：传递一个必须的参数（group）和3个可选的参数：
[receiver makeGroup: group,memberOne,memberTwo,memberThree];
和标准C函数一样，oc方法可以有返回值。
在下面的
