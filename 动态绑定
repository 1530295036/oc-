方法和其参数是在编译时结合在一起，但是消息和接收对象直到程序运行并发送消息时才结合。
因此调用哪个方法来响应一个消息只有在运行时才能决定。
当一个消息被发送时，一个运行时的消息分发例行程序找到消息中的接收者和方法名，然后定位到接收者所实现的与方法名相匹配的方法并调用方法，同时传给方法一个接收者的实例变量指针。
消息和方法的动态绑定和多态的紧密结合使面向对象的灵活性更强。
因为每个对象都可以有自己的方法，oc语句可以获得多种不同的结果，而且不需要发送多个消息，只需要发给不同的接收对象。
接收者可以在程序运行时被确定，选择哪个接收者取决于用户操作等因数。
自运行Appkit的代码时，用户会决定哪个对象接收诸如剪切、复制、粘贴等彩蛋指令，消息被发送给当前选中的对象。
一个现实文字的对象和一个显示矩形的对象对copy指令的消息会做出不同的响应。
因为消息直到运行时才会调用方法（换句话说，知道运行时方法才和消息绑定），所以这些方法的处理也是各自相互独立的。
发送消息的代码不需要关心接收者如何处理，甚至不需要考虑接收者能否对请求作出响应，应用程序所包含的各个对象可以按照自己的方法对copy消息作出响应。
oc对动态绑定提供了更好的支持，甚至允许在运行时使用一个变量作为方法名
